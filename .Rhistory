g + geom_bar(stat="identity", fill="red") + facet_grid(. ~ type) + theme_bw()
g + geom_bar(stat="identity", fill="col") + facet_grid(. ~ type) + theme_bw()
g + geom_bar(stat="identity", fill=cols) + facet_grid(. ~ type) + theme_bw()
g + geom_bar(stat="identity") + theme_bw() + scale_fill_manual(values=Set1)
g + geom_bar(stat="identity") + theme_bw() + scale_fill_manual(values="Set1"")
g <- ggplot(datasub, aes(year, Emissions), fill=cond)
g <- ggplot(datasub, aes(year, Emissions, fill=cond))
g + geom_bar(stat="identity") + scale_fill_brewer(palette = "Set1")
g + geom_bar(stat="identity") + scale_fill_brewer(palette = "Set1")
g + geom_bar(stat="identity")
g + geom_bar(stat="identity") + scale_fill_brewer(palette = "Set1") + theme_bw()
g + geom_bar(stat="identity") + facet_grid(. ~ type) + theme_bw()
summary(g)
g + geom_bar(stat="identity")
g + geom_bar()
g + geom_line()
g <- ggplot(datasub, aes(year, Emissions, fill=Emissions))
g + geom_bar(stat="identity") + scale_fill_brewer(palette = "Set1") + theme_bw()
g + geom_bar(stat="identity") + theme_bw()
ggplot(datasub, aes(x=year, y=Emissions, fill=Emissions)) + geom_bar(stat = "identity")
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity")
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity") + scale_fill_brewer(palette = "Set1")
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity") + scale_fill_brewer(cols)
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity")
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity", color = "black")
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity")
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity") + scale_fill_brewer()
ggplot(datasub, aes(x=as.factor(year), y=Emissions, fill=year)) + geom_bar(stat = "identity") + scale_fill_brewer()
ggplot(datasub, aes(x=as.factor(year), y=Emissions, fill=as.factor(year)) + geom_bar(stat = "identity") + scale_fill_brewer()
ggplot(datasub, aes(x=as.factor(year), y=Emissions, fill=as.factor(year)) + geom_bar(stat = "identity") + scale_fill_brewer()
datasub$year
str(datasub)
as.factor(datasub$year)
datasub$year <- as.factor(datasub$year)
str(datasub)
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity") + scale_fill_brewer()
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity") + scale_fill_brewer(palette = "Set1")
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity") + facet_grid(. ~ type) + scale_fill_brewer()
ggplot(datasub, aes(x=year, y=Emissions, fill=year)) + geom_bar(stat = "identity") + facet_grid(. ~ type) + scale_fill_brewer(palette = "Set1")
source('C:/Users/i56106/Dropbox/JHU/R/plot3.R')
NEI <- readRDS("summarySCC_PM25.rds")
datasub <- subset(NEI, fips == "24510")
datasub$year <- as.factor(datasub$year)
g <- ggplot(datasub, aes(x=year, y=Emissions, fill=year))
g + geom_bar(stat = "identity") + facet_grid(. ~ type)
+ theme_bw() + scale_fill_brewer(palette = "Set1")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1")
source('C:/Users/i56106/Dropbox/JHU/R/plot3.R')
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_classic() + scale_fill_brewer(palette = "Set1")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_grey() + scale_fill_brewer(palette = "Set1")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_minimal() + scale_fill_brewer(palette = "Set1")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type") + ylab("Year")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type") + xlab("Year")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type") + xlab("Year") + guides(color="none")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type") + xlab("Year") + legend(color="none")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type") + xlab("Year") + legend(color="none")
?legend
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type") + xlab("Year") + theme(legend.position="none")
plot(datasub$year)
source('C:/Users/i56106/Dropbox/JHU/R/plot3.R')
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type") + xlab("Year") + theme(legend.position="none")
g + geom_bar(stat = "identity") + facet_grid(. ~ type) + theme_bw() + scale_fill_brewer(palette = "Set1") + ggtitle("Baltimore MD Total Emissions by Type") + xlab("Year") + theme(legend.position="none")
g + geom_bar(stat = "identity") + facet_grid(. ~ type)
q()
source('C:/Users/i56106/Dropbox/JHU/R/plot3.R')
ls()
rm(list=ls())
ls()
SCC <- readRDS("Source_Classification_Code.rds")
SCC
str(SCC)
table(SCC$SCC)
str(SCC)
str(SCC$Data.Category)
table(SCC$Data.Category)
table(SCC$SCC.Level.One)
grep coal SCC
head(SCC, 1)
View(SCC)
names(SCC)
table(SCC$Short.Name)
source('C:/Users/i56106/Dropbox/JHU/R/plot3.R')
grep("[Cc]oal", SCC)
grep("oal", SCC)
grepl("oal", SCC)
grepl("oal", SCC$Short.Name)
grep("oal", SCC$Short.Name)
class(SDD)
class(SCC)
SCC[grepl("oal", SCC$Short.Name),]
SCC[grep("oal", SCC$Short.Name),]
table(SCC$Data.Category)
table(SCC$Short.Name)
SCC[grepl("Appliances", SCC$Short.Name),]
SCC[grepl("Appliances", SCC$Short.Name),"Short.Name"]
SCC[grepl("coal", SCC$Short.Name),"Short.Name"]
SCC[grepl("Coal", SCC$Short.Name),"Short.Name"]
SCC[grepl("Coal", SCC$EI.Sector),"EI.Sector"]
?intersect
?merge
table(SCC$SCC.Level.One)
table(SCC$SCC.Level.Two)
SCC[grepl("Coal", SCC$SCC.Level.One),"SCC.Level.One"]
SCC[grepl("Coal", SCC$SCC.Level.Two),"SCC.Level.Two"]
SCC[grepl("Coal", SCC$SCC.Level.Three),"SCC.Level.Three"]
SCC[grepl("Coal", SCC$SCC.Level.Four),"SCC.Level.Four"]
SCC[SCC$Short.Name %in% "Coal",]
SCC[SCC$Short.Name,]
grepl("Coal", SCC$Short.Name)
grepl("Coal", SCC$EI.Sector)
logical.Short.Name <- grepl("Coal", SCC$Short.Name)
logical.SCC.Level.Three <- grepl("Coal", SCC$SCC.Level.Three)
logical.SCC.Level.Four <- grepl("Coal", SCC$SCC.Level.Four)
logical.EI.Sector <- grepl("Coal", SCC$EI.Sector)
table(logical.EI.Sector)
table(logical.SCC.Level.Four)
table(logical.SCC.Level.Three)
table(logical.SCC.Short.Name)
table(logical.Short.Name)
names(SCC)
?intersect
intersect(logical.EI.Sector, logical.SCC.Level.Four)
merge(logical.EI.Sector, logical.SCC.Level.Four)
?Reduce
Reduce("|", logical.EI.Sector)
Reduce("&", logical.EI.Sector)
SCC[grep("Coal")]
SCC[grep("Coal",]
SCC[grep("Coal"),]
SCC[grep("Coal"), "Short.Name"]
SCC[grep("Coal"), "SCC"]
SCC[grep("Coal"), ]
SCC[grep("Coal"), SCC]
class(SCC)
SCC[grepl("Coal"), SCC]
SCC[grepl("Coal"), 4]
?grepl
SCC[grepl("Coal", x), 4]
SCC[grepl("Coal", SCC$Short.Name), 4]
SCC[grepl("Coal", SCC$Short.Name), ]
a <- SCC[grepl("Coal", SCC$Short.Name), ]
b <- SCC[grepl("Coal", SCC$EI.Sector), ]
dim(a)
dim(b)
merge(a, b)
c <- merge(a, b)
dim(a)
dim(b)
dim(c)
union(a, b)
c <- union(a, b)
dim(c)
?merge
names(a)
head(a)
merge(a, b, by = SCC)
merge(a, b, by = "SCC"")
merge(a, b, by = "SCC")
c <- merge(a, b, by = "SCC")
dim(c)
dim(b)
dim(a)
?rbind
rbind(a, b)
c< -rbind(a, b)
c <-rbind(a, b)
dim(c)
dim(a)
dim(b)
d <- unique(c)
dim(d)
a <- SCC[grepl("Coal", SCC$Short.Name), ]
sub1 <- SCC[grepl("Coal", SCC$Short.Name), ]
sub2 <- SCC[grepl("Coal", SCC$EI.Sector), ]
sub3 <- SCC[grepl("Coal", SCC$SCC.Level.Three), ]
sub4 <- SCC[grepl("Coal", SCC$SCC.Level.Four), ]
dim(sub1)
dim(sub2)
dim(sub3)
dim(sub4)
all <- rbind(sub1, sub2, sub3, sub4)
dim(all)
e <- unique(all)
dim(e)
SCC[grepl("Coal", SCC$Short.Name), ]
SCC[grepl("Coal", SCC$Short.Name), 1]
SCC[grepl("Coal", SCC$Short.Name), "SCC"]
sub1 <- SCC[grepl("Coal", SCC$Short.Name), "SCC"]
sub2 <- SCC[grepl("Coal", SCC$EI.Sector), "SCC"]
sub3 <- SCC[grepl("Coal", SCC$SCC.Level.Three), "SCC"]
sub4 <- SCC[grepl("Coal", SCC$SCC.Level.Four), "SCC"]
dim(sub1)
sub1
class(sub1)
as.data.frame(sub1)
sub1 <- as.data.frame(sub1)
sub2 <- as.data.frame(sub2)
all <- rdbind (sub1, sub2)
all <- rbind(sub1, sub2)
names(sub1)
names(sub2)
sub2 <- as.data.frame(sub1, row.names = NULL)
names(sub2)
sub1 <- as.data.frame(sub1, row.names = X)
sub1 <- as.data.frame(sub1, row.names = "X")
sub1 <- as.data.frame(sub1, colq)
ls()
rm(list=ls())
ls()
q()
ls()
rm(list=ls())
q()
?t
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
spam
data(spam)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
head(trainSpam$type)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] +1))
hcluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hcluster)
hcluster = hclust(dist(trainSpam[, 1:57]))
plot(hcluster)
plot(hcluster)
hcluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hcluster)
trainSpam[1:3, 1:3]
t(trainSpam[1:3, 1:3])
hcluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hcluster)
hcluster = hclust(dist(trainSpam[, 1:57]))
plot(hcluster)
hcluster = hclust(dist(t(log10(trainSpam[, 1:57])))
hcluster = hclust(dist(t(log10(trainSpam[, 1:57]))
hcluster = hclust(dist(t(log10(trainSpam[, 1:57] + 1 )))
hcluster = hclust(dist(t(log10(trainSpam[, 1:57] + 1 ))))
plot(hcluster)
hcluster = hclust(dist(log10(trainSpam[, 1:57] + 1 )))
plot(hcluster)
hcluster = hclust(dist(t(log10(trainSpam[, 1:57] + 1 ))))
plot(hcluster)
names(trainSpam)
hcluster = hclust(dist(t(log10(trainSpam[, 1:55] + 1 ))))
plot(hcluster)
trainSpam$type
as.numeric(trainSpam$type)
as.numeric(trainSpam$type) -1
names(trainSpam)
trainSpam$numType = as.numeric(trainSpam$type)
names(trainSpam)
y > 0.5
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
cvError
library(boot)
?reformulate
trainSpam[1]
trainSpam[2]
names(trainSpam[2])
names(trainSpam[1])
?glm
for (i in 1:55) {}
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
knitr
library(knitf)
library(knitr)
knitr
read.csv("E:\Dropbox\JHU\repo\RepData_PeerAssessment1\activity.zip")
read.csv("E:/Dropbox/JHU/repo/RepData_PeerAssessment1/activity.zip")
read.csv("E:/Dropbox/JHU/repo/RepData_PeerAssessment1/activity/activity.csv")
setwd("E:/Dropbox/JHU/repo/RepData_PeerAssessment1")
actdata <- read.csv("activity/activity.csv")
head(actdata)
str(actdata)
as.interval
hist()
hist
hist(actdata)
names(actdata)
hist(steps ~ date, data=actdata)
str(actdata)
?hist
hist(actdata$steps)
summary(actdata$steps)
hist(actdata$date)
hist(as.numeric(actdata$date))
actdata$date
as.numeric(actdata$date)
names(actdata)
actdata$date
unique(actdata$date)
names(actdata)
newdata$date <- unique(actdata$date)
data.frame(newdata)
newdata <- unique(actdata$date)
class(newdata)
as.data.frame(newdata)
tapply(actdata$steps, actdata$date, sum)
newdata <- tapply(actdata$steps, actdata$date, sum)
class(newdata)
newdata
as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata
names(newdata) <- c("data", "steps")
names(newdata)
names(newdata) <- c("steps")
hist(newdata$steps)
hist(newdata$steps, breaks=1000)
hist(newdata$steps, breaks=5000)
hist(newdata$steps, breaks=100)
hist(newdata$steps, breaks=10)
hist(newdata$steps, col = "red", breaks=10)
hist(newdata$steps, col = "red", breaks=20)
hist(newdata$steps, col = "red", breaks=15)
hist(newdata$steps, col = "red", breaks=16)
hist(newdata$steps, col = "red", breaks=12)
?hist
hist(newdata$steps, col = "red", breaks=12, xlim = c(0, 25000))
summary(newdata$steps)
hist(newdata$steps, col = "red", breaks=12, xlim = c(0, 22000))
hist(newdata$steps, col = "red", breaks=12, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=5, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=10, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=15, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=15, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=10, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=5, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=10, xlim = c(0, 25000))
?par
qplot(steps, data=newdata)
library(ggplot2)
qplot(steps, data=newdata)
qplot(steps, data=newdata, binwidth=15)
qplot(steps, data=newdata, binwidth=1000)
hist(newdata$steps, col = "red", breaks=5, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=12, xlim = c(0, 25000))
hist(newdata$steps, col = "red", breaks=12, xlim = c(0, 25000), xlab = "Steps per Day")
hist(newdata$steps, col = "red", breaks=12, xlim = c(0, 25000), xlab = "Steps", main = "Histogram of Steps per Day")
tapply(actdata$steps, actdata$date, sum)
newdata
summary(newdata$steps)
?summary
?plot
actdata
table(actdata$interval)
md
unique(actdata$interval)
as.Date(unique(actdata$interval, "%h%m")
as.Date(unique(actdata$interval, "%h%m"))
tapply(actdata$steps, actdata$interval, mean)
?tapply
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
interval.data <- tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
class(interval.data)
as.data.frame(interval.data)
interval.data <- as.data.frame(interval.data)
dim(interval.data)
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
?tapply
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE, simplify = FALSE)
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
interval.data <- as.data.frame(interval.data)
interval.data
dim(interval.data)
as.matrix(interval.data)
dim(as.matrix(interval.data))
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
apply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
sapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
a <- tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
as.character(a)
a <- tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
a
str(a)
dim(a
)
t(a)
dim(t(a))
dim(a
str(a)
a
class(a)
?as.data.frame
as.data.frame(a, row.names=c("interval", "steps"))
as.data.frame(a)
as.data.frame(a, optional = TRUE)
str(actdata$interval)
actdata$interval <- as.factor(actdata$interval)
a <- tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
a
as.data.frame(a)
b <- as.data.frame(a)
dim(b)
names(b)
unique(newdata$interval)
unique(actdata$interval)
levels
levels(actdata$interval)
class(levels(actdata$interval))
interval.name <- levels(actdata$interval)
class(interval.name)
interval.data <- tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
interval.data
interval.data <- as.data.frame(interval.data)
names(interval.data)
interval.data
?as.data.frame
cnames
colnames()
colnames(interval.data)
colnames(interval.data) <- c("steps")
names(interval.data)
interval.data$steps
class(interval.data)
steps <- interval.data$steps
cbind(interval.name, steps)
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
plot(tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE))
?plot
plot(actdata$interval, tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l")
plot(tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type = "l")
plot(levels(actdata$interval), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l")
?plot
plot(levels(actdata$interval), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval")
plot(levels(actdata$interval), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval", xlab = "Interval", ylab = "Number of Steps")
plot(levels(actdata$interval), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval", xlab = "Interval", ylab = "Number of Steps", col = "blue")
plot(levels(as.character(actdata$interval)), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval", xlab = "Interval", ylab = "Number of Steps", col = "blue")
plot(as.character(levels(actdata$interval)), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval", xlab = "Interval", ylab = "Number of Steps", col = "blue")
plot(as.character(levels(actdata$interval)), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval", xlab = "Interval Time", ylab = "Number of Steps", col = "blue")
tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
table(tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE))
a <- tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
summary(a)
which.max(a)
?which.max
a
as.matrix(a)
which.max(as.matrix(a))
a[104,]
a[104]
maxdata <- tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
plot(as.character(levels(actdata$interval)), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval", xlab = "Interval Time", ylab = "Number of Steps", col = "blue")
plot(as.character(levels(actdata$interval)), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval", xlab = "Interval Time", ylab = "Number of Steps", col = "blue")
plot(as.character(unique(actdata$interval)), tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE), type="l", main = "Steps taken per 5-minute Interval", xlab = "Interval Time", ylab = "Number of Steps", col = "blue")
maxdata <- tapply(actdata$steps, actdata$interval, mean, na.rm = TRUE)
which.max(as.matrix(maxdata))
maxdata[which.max(as.matrix(maxdata))]
library(impute)
install.packages("impute")
library(impute)
version
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
library(impute)
newdata
actdata
impute.knn(actdata$steps)
?impute.knn
impute.knn(actdata)$steps
head(actdata)
impute.knn(actdata$steps)
class(actdata)
as.matrix(actdata)
b <- as.matrix(actdata)
names(b)
class(actdata
)
impute.knn(actdata)
install.packages("mice")
library(mice)
library(mice)
md.pattern(actdata)
?mice
?plot
install.packages(c("boot", "ggplot2"))
?plot
?impute.knn
impute.knn(actdata$steps)
library(impute)
impute.knn(actdata$steps)
?mice
library(mice)
?mice
mice(actdata, m=5, maxit=50, meth='pmm', seed=500)
